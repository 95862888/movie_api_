name: CI/CD Pipeline

on:
  push:
    branches:
      - variant

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push server
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/docker-image:latest

  test:
    name: Run tests and linters
    needs:
      - build
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: "postgres"
          POSTGRES_PASSWORD: "postgres"
          POSTGRES_DB: "postgres"
#        ports:
#          - 5433:5433
    env:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_HOST: "db"
      POSTGRES_DB: "postgres"
      POSTGRES_PORT: 5432
      API_KEY: ""
    steps:
#      - run: |
#          touch .env
#          echo "${{ secrets.POSTGRE_HOST }}" > .env
#          echo "${{ secrets.POSTGRE_USER }}" >> .env
#          echo "${{ secrets.POSTGRE_DB }}" >> .env
#          echo "${{ secrets.POSTGRE_PASSWORD }}" >> .env
#          echo "${{ secrets.POSTGRE_PORT }}" >> .env
      - run: |          
          docker run ${{ secrets.DOCKERHUB_USER }}/docker-image:latest
          docker run -rm ${{ secrets.DOCKERHUB_USER }}/docker-image:latest sh -c "python3 test_main.py"

  deploy:
    name: Deploy to Server
    needs:
      - build
      - test
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.KEY }}
            port: ${{ secrets.PORT }}
            script: |
              docker pull ${{ secrets.DOCKERHUB_USER }}/docker-image:latest
              docker run -d -p 80:80 ${{ secrets.DOCKERHUB_USER }}/docker-image:latest
